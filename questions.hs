--questions.hs

--Question 1
{-
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
-}

question1:: Int->Int->Int->Int
question1 num1 num2 belowNum = sumOfMultiples num1 num2 (belowNum-1) 0

sumOfMultiples:: Int->Int->Int->Int->Int
sumOfMultiples num1 num2 num sumNums
	| num == 0												   	= sumNums
	| (isMultiple num num1) || (isMultiple num num2) 			= (sumNums + num) + sumOfMultiples num1 num2 (num-1) sumNums
	| otherwise												    = sumOfMultiples num1 num2 (num-1) sumNums

isMultiple:: Int->Int->Bool
isMultiple multiple ofNum
	| (mod multiple ofNum) == 0			= True
	| otherwise							= False
	
	
-- Question 2
{-
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
-}

question2 belowNum = sum (getEven (fibBelowNum belowNum 1 [1,2]) [])

getEven inList outList
	| inList == []									= outList
	| (mod (head inList) 2) == 0 				 	= (head inList):(getEven (tail inList) outList)
	| otherwise										= getEven (tail inList) outList

-- where num = 1 and list = [1,2] to start
fibBelowNum :: (Num t, Num a, Ord t) => t -> a -> [t] -> [t]
fibBelowNum belowNum num list
	| belowNum == 0										= [0]
	| (last list) >= belowNum							= init list
	| otherwise											= fibBelowNum belowNum (num+1) (list ++ [(sumPrevTwo list)])

sumPrevTwo :: Num a => [a] -> a
sumPrevTwo list					 	= (last (init list)) + (last list)


-- Question 3

{-
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
-}

--determinePrimes num list
--	| 
	
-- boolean = false
andList list = not ((head list) && (andList (tail list)))

isPrime num list 
	| list == []							= []
	| (mod num (head list)) == 0			= True:(isPrime num (tail list))
	| otherwise								= False:(isPrime num (tail list))


	
notFirstOrLast num count list  
	| num == 0 					= list
	| count == (num)			= reverse list
	| otherwise					= (notFirstOrLast num (count+1) (count:list))
	

--takes in number to get factors from and an empty list to start
--getFactors:: Double->[Double]->[Double]
getFactors num = getFactorsHelper num 1 []

getFactorsHelper num count list
	| count == num 					= list
	| (mod num count) == 0			= count:(getFactorsHelper num (count+1) list)
	| otherwise						= getFactorsHelper num (count+1) list			





